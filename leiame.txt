
# Conways Time Travel

Bernardo Pavloski Tomasi - GRR20223827
Eric Viana Kivel         - GRR20220069

## Dependências

Para a compilação do projeto, é necessário que o `Z3` esteja instalado
no sistema. Não recomendamos a compilação local do `Z3` visto que
"demora muito". Então:

```bash
# Debian based
sudo apt install z3

```

## Estratégia

A obtenção do estado anterior de um tabuleiro de entrada no Jogo da
Vida de Conway envolve a implementação de duas abordagens assíncronas
distintas, cada uma utilizando funcionalidades específicas da
biblioteca `Z3` para abordar diferentes aspectos do problema. A
estratégia adotada combina o aprofundamento iterativo com as
capacidades de otimização proporcionadas pela classe `z3::optimize`.

### Aprofundamento Iterativo

A primeira tarefa assíncrona utiliza a classe `z3::solver` para realizar
uma busca iterativa aprofundada. Este método busca progressivamente
soluções que satisfaçam as restrições do problema, começando com
limites menos restritivos e aumentando a complexidade conforme
necessário. 

```c
// rgol.cpp
bool rgol::solve_iter(const Matrix<int>* t1, Matrix<int>& t0, unsigned timeout, unsigned threads, bool& sat) {
    // [...]
    z3::expr total = add_clauses(st, t1, ct1, ct0);
    // [...]
    for(int i = max; i >= 0 && timeout; i--) {
        time_it(timeout, 
            p.set("timeout", timeout);
            sol.set(p);
            sol.push(); 
            sol.add(total <= ctx.int_val(max));
            if(sol.check() == z3::sat) {
                cur = count_ones(st, ct0);
                if(cur <= max) {
                    fill_t0(st, ct0, t0);
                    max = cur;
                }
                sat = true;
            } else {
                break;
            }
            sol.pop();
        );
    }

    return sat;
}
```

À medida que solve_iter() encontra soluções, a restrição sobre o número de
células vivas no tabuleiro se torna progressivamente mais rigorosa.
Inicialmente, é calculado um valor inicial para o número de células vivas
permitido, e esse limite é reduzido de forma incremental a cada iteração. Essa
redução é implementada através da instrução `sol.add(total <= ctx.int_val(max))`,
onde max representa o limite superior do número de células vivas permitido no
estado atual da busca.


### Utilização da Classe `z3::optimize` para Minimização

Paralelamente à busca iterativa, a segunda tarefa assíncrona utiliza a classe
`z3::optimize`. Esta classe é especialmente projetada para problemas que requerem
otimização, ou seja, encontrar soluções que não apenas satisfazem as
restrições, mas também otimizam uma determinada função objetivo.

A função objetivo a ser minimizada consiste numa expressão composta pela
soma de expressões `if-then-else`.

```c
// rgol.cpp
template <class T>
static z3::expr add_clauses(State<T>& st, const Matrix<int>& t1, const Matrix<z3::expr>& ct1, Matrix<z3::expr>& ct0) {
    // [...]
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            neigh = neigh_sum(st, ct0, i, j);
            total = total + z3::ite(ct0(i, j), st.env.one, st.env.zero);    <----------

            /* Game of Life rules */
            st.solver.add(
                ct1(i, j) == z3::ite(
                    (neigh == st.env.three) ||
                    (ct0(i, j) && (neigh == st.env.two)),
                    st.env.expr_true,
                    st.env.expr_false
                )
            );
        }
    }

    return total;
}
```

Na função acima, as cláusulas que modelam o Jogo da Vida são adicionadas ao
otimizador e a expressão `total` é gerada como a soma das contribuições de cada
célula do tabuleiro. Essa expressão utiliza a função `z3::ite`, que representa
a lógica "if-then-else", para verificar se uma célula está viva. Assim, esse
"cálculo" permite que `total` represente simbolicamente a contagem de todas as
células vivas no estado anterior, atuando como a função objetivo a ser minimizada.

A expressão `total` é adicionada como função objetivo no otimizador no
seguinte trecho de código:

```c
// rgol.cpp
bool solve(const Matrix<int>& t1, Matrix<int>& t0, unsigned timeout) {
    //[...]
    sat = false;
    init_repr(st, t1, ct1, ct0);
    opt.minimize(add_clauses(st, t1, ct1, ct0));    <----------
    if(opt.check() == z3::sat) {
        fill_t0(st, ct0, t0);
        sat = true;
    }

    return sat;
}
```


### Combinação das Abordagens

A implementação das abordagens utilizando `z3::solver` e `z3::optimize` foi
planejada considerando a restrição de tempo de 5 minutos para obter uma solução
para o problema de encontrar o estado anterior mínimo de um tabuleiro no Jogo
da Vida. Essa limitação exigiu uma estratégia que equilibrasse eficiência e
qualidade das soluções.

O `z3::solver`, com sua abordagem de busca iterativa aprofundada, foi escolhido
por sua velocidade superior para encontrar rapidamente uma solução inicial que
satisfaça as restrições do problema. Essa abordagem é altamente paralelizável,
permitindo o uso de quase todas as threads disponíveis no sistema. Embora o solver
não tenha como objetivo direto a minimização do número de células vivas, ele
fornece uma base sólida e eficiente para garantir que, pelo menos, uma solução
viável esteja disponível.

O `z3::optimize`, por outro lado, foi integrado ao sistema para abordar a
necessidade de minimizar o número de células vivas no estado anterior. Apesar
de ser eficaz para resolver problemas de otimização, o `z3::optimize` opera em
uma única thread, o que limita sua capacidade de explorar paralelismo e torna
seu desempenho significativamente mais lento em comparação com o `z3::solver`.
Assim, dadas as restrições, é possível que uma solução não seja encontrada
nos 5 minutos disponibilizads.

Para resolver isso, ao final dos 5 minutos, observamos os resultados
das tarefas assíncronas. Dessa forma, se o `z3::optimize` "retornou",
utilizamos a sua solução. Caso contrário, retornamos a solução obtida pelo
aprofundamento iterativo, implementado com o `z3::solver`.


### Considerações Finais

Caso a função que utiliza o `z3::solver` detecte rapidamente que o problema é
insatisfatível (unsat), sabemos que a task assíncrona com `z3::optimize` não é
mais necessário. Assim, abandonamos essa tarefa (não é possível matar `futuros`
em C++).
